ftp://ik.su.lt/PHP/
https://www.princeton.edu/~mlovett/reference/Regular-Expressions.pdf
http://php.net/manual/en/refs.basic.text.php
http://php.net/manual/en/regexp.reference.escape.php
http://php.net/manual/en/regexp.reference.subpatterns.php
http://www.rexegg.com/regex-disambiguation.html
https://www.safaribooksonline.com/library/view/programming-php-3rd/9781449361068/ch04s08.html

- Reg
  -- Windows uses CR+LF (\r\n)
  -- Linux LF (\n)
  -- OSX CR (\r)
  
  \R in preg_* matches all three.
  
  -------------------------------------------------------------------------------
  \s = [\t\r\n\v\f]     Any whitespace character
  \S = [^\t\r\n\v\f]    Any non-whitespace character
  \d = [0-9]            Any digit
  \D = [^0-9]           Any non-digit
  \w = [0-9A-Za-z_]     Any word character (letter, number, underscore)
  \W = [^0-9A-Za-z_]    Any non-word character
  \b                    Any word boundary character
    - /\bweb\b/i
      "PHP is the web scripting language of choice." -> OK (Có từ web riêng lẽ)
      "PHP is the website scripting language of choice." -> NG (Không có từ web riêng lẽ)  
  
  [:lower:]   = [a-z] 
  [:upper:]   = [A-Z] 
  [:alpha:]   = [a-zA-Z] 
  [:digit:]   = [0-9]
  [:alnum:]   = [a-zA-Z0-9]
  [:xdigit:]  = [0-9a-fA-F] #Hexadecimal digit
  [:space:]   = [\n\r\t \x0B]
  [:ascii:]   = [\x01-\x7F]
  [:graph:]   = [^\x01-\x20]
  [:punct:]   = [-!"#$%&'()*+,./:;<=>?@[\\\]^_'{|}~]
  
  -------------------------------------------------------------------------------
  http://php.net/manual/en/book.ctype.php  
  -------------------------------------------------------------------------------
  
  /i 	for PCRE_CASELESS      : Xử lý không phân biệt chữ hoa hay thường    
  /m 	for PCRE_MULTILINE     : Make caret (^) match after, and dollar sign ($) match before, internal newlines (\n)
  /s 	for PCRE_DOTALL        : Make period (.) match any character, including newline (\n)
                               Enables "single-line mode". In this mode, the dot matches newlines.
  /x 	for PCRE_EXTENDED      : Remove whitespace and comments from the pattern
  /U 	for PCRE_UNGREEDY      : Reverses the greediness of the subpattern; * and + now match as little as possible, instead of as much as possible
  /u                         : Causes pattern strings to be treated as UTF-8
  /X 	for PCRE_EXTRA         : Causes a backslash followed by a character with no special meaning to emit an error
  /J 	for PCRE_INFO_JCHANGED :
  /A                         : Causes the beginning of the string to be anchored as if the first character of the pattern were ^
  /D                         : Causes the $ character to match only at the end of a line
  /S                         : Causes the expression parser to more carefully examine the structure of the pattern, so it may run slightly faster the next time (such as in a loop)
  
  -------------------------------------------------------------------------------
  (?P<controller>\w+)
    - (?<name>pattern)
    
  (?:\/(?P<action>\w+)):
    - (?:subpattern)
    - (?<modifier>:subpattern)
    
  (?(condition)yespattern)  
  (?(condition)yespattern|nopattern)
  (?(?=regex)then|else)
  
  Chỉ định vùng để tìm kiếm
  (?=subpattern)  : Positive look ahead
  (?!subpattern)  : Negative look ahead
  (?<=subpattern) : Positive look behind
  (?<!subpattern) : Negative look behind
  (pattern)?      : One or nothing  
  
  (?:x)           : Matches x not remember the match
  x(?=y)          : Matches x only if x is followed by y
  x(?!y)          : Matches x only if x is not followed by y
  
  Ex:
  (?>(?:a|b)*)
  
  Tìm kiếm chuỗi sau ký tự # và bất kỳ ký tự rồi phía trước #
  '/(?<=#)(.*)(?=#)?/'
  '1232#hello world#' => hello world

- Template
  $data = [ 'key' => 'parameters' ];
  $tmpl = 'The easiest way to pass more than one {key} to the callback function is with the 'use' keyword.';
  
  $result = preg_replace_callback( '|\{([^\}]+)\}|', function( $matches ) use ( $data ){  
    return isset( $data[ $matches[1] ] ) ? $data[ $matches[1] ] : '';
  }, $tmpl);
  
- HTML Parse
  $pattern_long = '{                      # recursive regex to capture contents of "main" DIV
    <div\s+class="main"\s*>               # match the "main" class DIV opening tag
      (                                   # capture "main" DIV contents into $1
        (?:                               # non-cap group for nesting * quantifier
          (?: (?!<div[^>]*>|</div>). )++  # possessively match all non-DIV tag chars
          |                               # or
          <div[^>]*>(?1)</div>            # recursively match nested <div>xyz</div>
        )*                                # loop however deep as necessary
      )                                   # end group 1 capture
    </div>                                # match the "main" class DIV closing tag
    }six';                                // single-line (dot matches all), ignore case and free spacing modes ON
    
    Thực hiện loop, yêu cầu bắt đầu xử lý lại ở Group x(0->x)
    (?R) = (?0) -> refers to the whole pattern
    (?1)        -> refers to the first capturing group    
    
    /*
      Bắt đầu tìm với `{`
      Nếu [^{}]+ thỏa điều kiện để nhận
      Ngược lại xử lý từ `{`
        -> Xử lý đệ quy để tìm {xxxx}
      Kết thúc với `}`
     */    
    $pattern_long = '/
    {           # find the first opening '{'.
      (?:       # start a new group, this is so '|' below does not apply/affect the opening '{'.
        [^{}]+  # skip ahead happily if no '{' or '}'.
        |       #   ...otherwise...
        (?R)    # we may be at the start of a new group, repeat whole pattern.
      )
      *         # nesting can be many levels deep.
    }           # finally, expect a balanced closing '}'
  /six';

'cdf' => array(
                'filter'  => FILTER_VALIDATE_REGEXP,
                'options' => array('regexp' => '/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/'),
            ),

$Type = filter_input(INPUT_POST, 'type', FILTER_VALIDATE_REGEXP, array('options' => array('default' => 1, 'regexp' => '/\d{1,2}/')));
$ReportId = filter_input(INPUT_POST, 'id', FILTER_VALIDATE_INT);
http://stackoverflow.com/questions/34020595/filter-validate-regexp-with-filter-input-array

Cắt ra thành các phần nhưng giữ lại table thành một phần
if(preg_match_all('/<table[^>]*>.*?<\/table>|<[^>]++>|[^<>\s]++/', $content, $matches)){    
preg_split('/(<table[^>]*>.*?<\/table>)/is', $content, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE)    
    
