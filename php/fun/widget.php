<?php 
/**
 * Creates a widget and executes it.
 * @param string $className the widget class name or class in dot syntax (e.g. application.widgets.MyWidget)
 * @param array $properties list of initial property values for the widget (Property Name => Property Value)
 * @param boolean $captureOutput whether to capture the output of the widget. If true, the method will capture
 * and return the output generated by the widget. If false, the output will be directly sent for display
 * and the widget object will be returned. This parameter is available since version 1.1.2.
 * @return mixed the widget instance when $captureOutput is false, or the widget output when $captureOutput is true.
 */
function widget( $className, $properties = array(), $captureOutput = false ) {
	$className .= '_controller';
	$widget = new $className();
	
	foreach( $properties as $name => $value ) {
		$widget->$name = $value;
	}
	
	if( $captureOutput ) {
		ob_start();
		ob_implicit_flush(false);
		try {
			$widget->run();
		} catch(Exception $e) {
			ob_end_clean();
			throw $e;
		}
		return ob_get_clean();
	} else {		
		$widget->run();
	}
}

?>
