<?php 
class App {
  /**
   * Looks for the root path of application
   *
   * @return string
   */
  public static function path( $name = '' ){
    static $path = NULL;

    if( $path == NULL ) {
      $path = (new ReflectionClass( 'App' ))->getFilename();
      $path = dirname( dirname( $path ) ) . DIRECTORY_SEPARATOR;
    }

    if( is_array( $name ) ) {
      $name = join( DIRECTORY_SEPARATOR, $name );
    }

    return $path . $name;
  }

  /**
   * Renders a view file.
   * This method includes the view file as a PHP script
   * and captures the display result if required.
   * @param string $_viewFile_ view file
   * @param array $_data_ data to be extracted and made available to the view file
   * @param boolean $_return_ whether the rendering result should be returned as a string
   * @return string the rendering result. Null if the rendering result is not required.
   */
  public static function renderFile( $_data_ = null, $_viewFile_ = null, $_return_ = false ) {
    // we use special variable names here to avoid conflict when extracting data
    if( is_array( $_data_ ) ) {
      extract( $_data_, EXTR_PREFIX_SAME, 'data' );
    } else {
      $data = $_data_;
    }

    if( $_return_ ) {
      ob_start();
      ob_implicit_flush( false );
      require( $_viewFile_ );
      return ob_get_clean();
    } else {
      require( $_viewFile_ );
    }
  }

  /**
   * Creates a widget and executes it.
   * @param string $className the widget class name or class in dot syntax (e.g. application.widgets.MyWidget)
   * @param array $properties list of initial property values for the widget (Property Name => Property Value)
   * @param boolean $captureOutput whether to capture the output of the widget. If true, the method will capture
   * and return the output generated by the widget. If false, the output will be directly sent for display
   * and the widget object will be returned. This parameter is available since version 1.1.2.
   * @return mixed the widget instance when $captureOutput is false, or the widget output when $captureOutput is true.
   */
  public static function widget( $className, $properties = array(), $captureOutput = false ) {
    $className .= '_controller';
    $widget = new $className();

    foreach( $properties as $name => $value ) {
      $widget->$name = $value;
    }

    if( $captureOutput ) {
      ob_start();
      ob_implicit_flush(false);
      try {
        $widget->run();
      } catch(Exception $e) {
        ob_end_clean();
        throw $e;
      }
      return ob_get_clean();
    } else {		
      $widget->run();
    }
  }

  /**
   * Autoload class  
   */
  public static function autoload( $name ){      
    if( preg_match( '/^(.+)\_(controller|model)$/', $name, $matches ) ) {
      
      $name = str_replace( '_', DIRECTORY_SEPARATOR, $matches[1] );      
      require_once( App::path( array( $matches[2],  strtolower( $name ) . '.php') ) );      
    } else {

      $name = str_replace( '_', DIRECTORY_SEPARATOR, $name );
      require_once( App::path( array( 'class',  strtolower( $name ) . '.php') ) );
    }
  }
}

spl_autoload_register( array( 'App', 'autoload' ) );
?>
