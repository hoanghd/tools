5. Model
    * protected $table = 'users';
    * all()
    * find( id )
    * count()
	* max('amount|size')
	* min('amount|size')
	* avg('amount|size')
	* sum('amount|size')
    * where('id', '=', 1)
	* or_where('face', 'LIKE', '%malemodel%')
	* where_in()
	* where_not_in()
	* or_where_in() 
	* or_where_not_in()
	* where_null()
	* where_not_null() 
	* or_where_null()
	* or_where_not_null()
	* where_size(5)
	* where_size_and_height(700, 400)
    * take(5)
    * skip(10)
    * orderBy('rating', 'asc')
	* order_by('size', 'asc')->
    * save();
    * create($data)
    * delete();
    * destroy(1);
    * withTrashed()
    * onlyTrashed()
    * restore();
    * forceDelete();
	* join('project', 'tasks.id', '=', 'project.task_id')
	* increment('size');
	* decrement('size');
	
	* update(array('worn' => DB::raw('NOW()')));
	
	* join('project', function($join) {
		$join->on('tasks.id', '=', 'project.task_id');
		$join->or_on('tasks.author_id', '=', 'project.author_id');
	 }) //and_on()
	
	* or_where(function( $query ){
		$query->where('age', '>', 25);
		$query->where('votes' '>', 100);
	 })
	
	Result
	* get()
	* first()
	* find( $id )
	* only( $fieldname )
	* get(array())
	
	Set To Model
	* fill($arr)
	   
    class User extends Model {
	public function profile(){
		return $this->hasOne('App\Profile');
	}
    }
    
    class Profile extends Model {
	public function user(){
		return $this->belongsTo('App\User');
	}
    }
    
    class User extends Model {
	public function roles(){
		return $this->belongsToMany('App\Role');
	}
    }
    
    class Product extends Model {
	public function orders() {
		return $this->hasManyThrough('App\Order', 'App\OrderItem');
	}
    }
    
    class Image extends Model {
	public function imageable(){
		return $this->morphTo();
	}
   }
   
   class Article extends Model {
	public function images() {
		$this->morphMany('App\Image', 'imageable');
	}
   }
    
	
	DB::table('users')
    $profile = User::find(1)->profile;
    $roles = User::find(1)->roles;
    $user->roles()->attach($roleId);
    $user->roles()->detach($roleId);
    $user->roles()->sync(1, 2, 3, 4, 5);
    $user->groups()->attach(1, ['is_moderator' => true]);
    $user->groups()->sync([1 => ['is_moderator' => true]]);
    
    
