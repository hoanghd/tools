8.2. Model
    - https://laravel.com/docs/5.3/eloquent
    - https://laravel.com/docs/5.3/pagination
    - https://laravel.com/docs/5.3/eloquent-relationships
    - Illuminate\Database\Eloquent\Model
    
    - protected $table = 'users';
    - Sử dụng được các function Query
    ---------------------------------------
    -----------------::--------------------
    ---------------------------------------
    * clearBootedModels()
    * addGlobalScope($scope, Closure $implementation = null)
    * hasGlobalScope($scope)
    * getGlobalScope($scope)
    * observe($class, $priority = 0)
    * hydrate(array $items, $connection = null)
    * hydrateRaw($query, $bindings = [], $connection = null)
    * create(array $attributes = [])
    * forceCreate(array $attributes)
    * query()
    * on($connection = null)
    * onWriteConnection()
    * all($columns = ['*'])
    * with($relations)
    * destroy($ids)
    * saving($callback, $priority = 0)
    * saved($callback, $priority = 0)
    * updating($callback, $priority = 0)
    * updated($callback, $priority = 0)
    * creating($callback, $priority = 0)
    * created($callback, $priority = 0)
    * deleting($callback, $priority = 0)
    * deleted($callback, $priority = 0)
    * flushEventListeners()
    * unguard($state = true)
    * reguard()
    * isUnguarded()
    * unguarded(callable $callback)
    * resolveConnection($connection = null)
    * getConnectionResolver()
    * setConnectionResolver(Resolver $resolver)
    * unsetConnectionResolver()
    * getEventDispatcher()
    * setEventDispatcher(Dispatcher $dispatcher)
    * unsetEventDispatcher()
    * cacheMutatedAttributes($class)
    
    ---------------------------------------
    ------------------>--------------------
    ---------------------------------------
    * fill(array $attributes)    
    * delete()
    * save(array $options = []) //Insert, Update
    * forceDelete()    
    * saveOrFail(array $options = [])
    * update(array $attributes = [], array $options = [])
    * toJson($options = 0)
    * jsonSerialize()
    * toArray()
    * joiningTable($related)
    
    * hasOne($related, $foreignKey = null, $localKey = null)
    * belongsTo($related, $foreignKey = null, $otherKey = null, $relation = null)
    * hasManyThrough($related, $through, $firstKey = null, $secondKey = null, $localKey = null)
    * hasMany($related, $foreignKey = null, $localKey = null)
    * belongsToMany($related, $table = null, $foreignKey = null, $otherKey = null, $relation = null)
    
    * morphMany($related, $name, $type = null, $id = null, $localKey = null)    
    * morphToMany($related, $name, $table = null, $foreignKey = null, $otherKey = null, $inverse = false)
    * morphedByMany($related, $name, $table = null, $foreignKey = null, $otherKey = null)      
    
    * getGlobalScopes()    
    * forceFill(array $attributes)
    * newInstance($attributes = [], $exists = false)
    * newFromBuilder($attributes = [], $connection = null)
    * fresh($with = [])
    * load($relations)
    * append($attributes)    
    * morphOne($related, $name, $type = null, $id = null, $localKey = null)    
    * morphTo($name = null, $type = null, $id = null)
    * getActualClassNameForMorph($class)    
      
    * getObservableEvents()
    * setObservableEvents(array $observables)
    * addObservableEvents($observables)
    * removeObservableEvents($observables)    
    * push()    
    * touchOwners()
    * touches($relation)
    * touch()
    * setCreatedAt($value)
    * setUpdatedAt($value)
    * getCreatedAtColumn()
    * getUpdatedAtColumn()
    * freshTimestamp()
    * freshTimestampString()
    * newQuery()
    * newQueryWithoutScope($scope)
    * newQueryWithoutScopes()
    * newEloquentBuilder($query)
    * newCollection(array $models = [])
    * newPivot(Model $parent, array $attributes, $table, $exists)
    * getTable()
    * setTable($table)
    * getKey()
    * getQueueableId()
    * getKeyName()
    * setKeyName($key)
    * getQualifiedKeyName()
    * getRouteKey()
    * getRouteKeyName()
    * usesTimestamps()
    * getMorphClass()
    * getPerPage()
    * setPerPage($perPage)
    * getForeignKey()
    * getHidden()
    * setHidden(array $hidden)
    * addHidden($attributes = null)
    * makeVisible($attributes)
    * makeHidden($attributes)
    * getVisible()
    * setVisible(array $visible)
    * addVisible($attributes = null)
    * setAppends(array $appends)
    * getFillable()
    * fillable(array $fillable)
    * getGuarded()
    * guard(array $guarded)
    * isFillable($key)
    * isGuarded($key)
    * totallyGuarded()
    * getTouchedRelations()
    * setTouchedRelations(array $touches)
    * getIncrementing()
    * setIncrementing($value)    
    * attributesToArray()
    * relationsToArray()
    * getAttribute($key)
    * getAttributeValue($key)
    * getRelationValue($key)
    * hasGetMutator($key)
    * hasCast($key, $types = null)
    * getCasts()
    * setAttribute($key, $value)
    * hasSetMutator($key)
    * getDates()
    * fromDateTime($value)
    * setDateFormat($format)
    * fromJson($value, $asObject = false)
    * replicate(array $except = null)
    * is(Model $model)
    * getAttributes()
    * setRawAttributes(array $attributes, $sync = false)
    * getOriginal($key = null, $default = null)
    * syncOriginal()
    * syncOriginalAttribute($attribute)
    * isDirty($attributes = null)
    * isClean($attributes = null)
    * getDirty()
    * getRelations()
    * getRelation($relation)
    * relationLoaded($key)
    * setRelation($relation, $value)
    * setRelations(array $relations)
    * getConnection()
    * getConnectionName()
    * setConnection($name)
    * getMutatedAttributes()
    * offsetExists($offset)
    * offsetGet($offset)
    * offsetSet($offset, $value)
    * offsetUnset($offset)

   - Một tính năng là query scope
    public function scopePopular($query) {
        return $query->where('votes', '>', 100);
    }
    
    public function scopeActive($query){
        return $query->where('active', 1);
    }
    
    public function scopeOfType($query, $type) {
        return $query->where('type', $type);
    }
    
    $users = User::popular()
                ->active()
                ->ofType('admin')
                ->orderBy('created_at')
                ->get();
    
    - Relationships
    * hasOne($related, $foreignKey = null, $localKey = null)
    * belongsTo($related, $foreignKey = null, $otherKey = null, $relation = null)
        public function post() {
            return $this->belongsTo('App\Post', 'post_id', 'id');
        }
        $post = Comment::find(1)->post;    
    
    * hasMany($related, $foreignKey = null, $localKey = null)
        public function comments() {
            return $this->hasMany('App\Comment', 'post_id', 'id');
        }
        
        $comments = Post::find(1)->comments;
    
    * belongsToMany($related, $table = null, $foreignKey = null, $otherKey = null, $relation = null)
        public function tags() {
            return $this->belongsToMany('App\Tag', 'posts_tags', 'post_id', 'tag_id');
        }
        
        $tags = Post::find(1)->tags;
        
    * hasManyThrough($related, $through, $firstKey = null, $secondKey = null, $localKey = null)        
        User -> Post -> Comment    
        Từ User get all comments thì có thể dùng attr này
        * $firstKey = Post->user_id, 
        * $secondKey = Comment->post_id
        
        public function comments() {
            return $this->hasManyThrough('App\Comment', 'App\Post', 'user_id', 'post_id', 'id');
        }
        
        $comments = User::find(1)->comments;
        
    
    
    