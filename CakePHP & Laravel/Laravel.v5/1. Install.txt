1. Install
  - https://laravel.com/docs/5.3/installation
  - requirements
    * PHP >= 5.6.4
    * OpenSSL PHP Extension
    * PDO PHP Extension
    * Mbstring PHP Extension
    * Tokenizer PHP Extension

  - composer global require "laravel/installer"
  - composer create-project --prefer-dist laravel/laravel demo

2. Config
  - config/database.php
  - .env
  
3. Cấu trúc
  - app: Chứa các phần chính để phát triển chương trình models, controllers, and middleware
  - bootstrap: Chứa các file để khởi tạo Application
  - config: Chứa các config file
  - database: Chứa các Entry
  - public: Thư mục public server 
  - resources: Chứa View file, các file ngôn ngữ, assets (CoffeeScript, SCSS, etc.).
  - storage: cache, session, log

4. Debug
  - dd()
  - \Log::debug($items);
  - \Log::info('Just an informational message.');
  - \Log::warning('Something may be going wrong.');
  - \Log::error('Something is definitely going wrong.');
  - \Log::critical('Danger, Will Robinson! Danger!');
  
5. Controller, Model, View
  - routes
    * Trỏ tới Controller[Action]
    Route::get('/', 'WelcomeController@index');
    
    * Trỏ tới View
    Route::get('/', function(){
    	return view('welcome');
    });
  
  - Controller  /app/Http/Controllers/
  - Model	/app/*
  - View        /resources/views/
  - Layout	/resources/views/layouts

6. Route
  - Route::get('/', 'WelcomeController@index');
  - Route::post('/', 'WelcomeController@index');
  - Route::resource('lists', 'ListsController'); Tự động link theo các action sau
    * GET     /lists            lists#index
    * GET     /lists/new        lists#create
    * POST    /lists            lists#store
    * GET     /lists/:id        lists#show
    * GET     /lists/:id/edit   lists#edit
    * PUT     /lists/:id        lists#update
    * DELETE  /lists/:id        lists#destroy
  
  - Route::controllers([ 'lists' => 'ListsController' ]); Theo rule như sau
    * GET /lists/index    -> ListsController::getIndex()
    * Method  /Controller/Action  -> Controller::<Method>Action()
    
  ************************************
  ************************************
  Route::get('blog/category/{category}/{subcategory?}', 'BlogController@category');
    -> public function category( $category, $subcategory )
    * {subcategory?}: Có thể biến không tồn tại giá trị
  
  Route::get('blog/category/{category}', ['as' => 'blog.category', 'uses' => 'BlogController@category']);
    -> <a href="{{ URL::route('blog.category', ['category' => 'php']) }}">PHP</a>
  
  Route::get('area/{area}', function($area) {})->where('area, '[0-9]+');
  
  
7. Controller
  - return view('home.welcome');  /resources/views/home/welcome.blade.php
  - Gán biến to View
    return view('home.welcome')
            ->with('category', $category); 
            
            //Tương tự như 
            view('home.welcome')
              ->withCategory($category);
              
            view('home.welcome')
              ->with(['category' => $category]);
              
            view('welcome', compact('category'));
            
8. View
  - Blade Template Engine
    * {{ $name }}   //Biến giá trị
    * {{ $name or 'California' }} //Nếu không tồn tại thì lấy giá trị mặc định
    * {{{ $name }}}
    * {!! $name !!} //Hiển thị không escape
    * {{ asset('css/bootstrap.min.css')}}
    * {{ url('cats/'.$cat->id) }}
    
    Sử dụng LaravelCollective/HTML
    * {!! HTML::image('images/logo.png', 'TODOParrot logo') !!}
    * {!! HTML::style('css/app.min.css') !!}
    * {!! HTML::script('javascript/jquery-1.10.1.min.js') !!}
    
    * @foreach ($lists as $list)    //Loop array
       <li>{{ $list }}</li>
      @endforeach
      
    * @forelse($lists as $list)    //Loop array
  			<li>{{ $list }}</li>
  			@empty
  			<li>You don't have any lists saved.</li>
		  @endforelse

    * @if (count($lists) > 0)
        //
      @elseif (count($lists) == 1)
        //
      @else
        //
      @endif
      
    * @include('partials.row', array('link' => $link))
      /resources/views/partials/row.blade.php
    
  - Layout
    * /resources/views/layouts/master.blade.php
    
    * View 
      @extends('layouts.master')
      @section('content')
      //
      @endsection
  
9. Model
    * protected $table = 'users';
    * all()
    * find( id );
    * count(), max('amount'), min('amount'), avg('amount'), sum('amount')
    * where('id', '=', 1)->first();
    * take(5)->get()
    * skip(10)->get()
    * orderBy('rating', 'asc')
    * save();
    * create($data)
    * delete();
    * destroy(1);
    * withTrashed()->get()
    * onlyTrashed()->get()
    * restore();
    * forceDelete();
    
    class User extends Model {
	public function profile(){
		return $this->hasOne('App\Profile');
	}
    }
    
    class Profile extends Model {
	public function user(){
		return $this->belongsTo('App\User');
	}
    }
    
    class User extends Model {
	public function roles(){
		return $this->belongsToMany('App\Role');
	}
    }
    
    class Product extends Model {
	public function orders() {
		return $this->hasManyThrough('App\Order', 'App\OrderItem');
	}
    }
    
    class Image extends Model {
	public function imageable(){
		return $this->morphTo();
	}
   }
   
   class Article extends Model {
	public function images() {
		$this->morphMany('App\Image', 'imageable');
	}
   }
    
    $profile = User::find(1)->profile;
    $roles = User::find(1)->roles;
    $user->roles()->attach($roleId);
    $user->roles()->detach($roleId);
    $user->roles()->sync(1, 2, 3, 4, 5);
    $user->groups()->attach(1, ['is_moderator' => true]);
    $user->groups()->sync([1 => ['is_moderator' => true]]);
    
    
10. Session
    * Session::has('success')
    * Session::get('success')
      
N. Tool
  - php artisan route:list
    * Liệt kê các route hiện tại đang đăng ký
  - php artisan route:cache
  - php artisan route:clear
  
  - php artisan make:controller WelcomeController
  - php artisan make:model Users
  
  - php artisan make:command
  - php artisan make:console
  - php artisan make:controller
  - php artisan make:event
  - php artisan make:middleware
  - php artisan make:migration
  - php artisan make:model
  - php artisan make:provider
  - php artisan make:request
  
X.Plugin
  - composer require laravelcollective/html
