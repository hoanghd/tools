4.Number
	
	- currency(mixed $value, string $currency = null, array $options =[])
		+ $currency : EUR, GBP, USD (€, £, $)
		+ $options
			* before 			Text to display before the rendered number.
			* after 			Text to display after the rendered number.
			* zero 				The text to use for zero values; can be a string or a number. ie. 0, ‘Free!’.
			* places 			Number of decimal places to use, ie. 2
			* precision 		Maximal number of decimal places to use, ie. 2
			* locale 			The locale name to use for formatting number, ie. “fr_FR”.
			* fractionSymbol 	String to use for fraction numbers, ie. ‘ cents’.
			* fractionPosition 	Either ‘before’ or ‘after’ to place the fraction symbol.
			* pattern 			An ICU number pattern to use for formatting the number ie. #,###.00
			* useIntlCode 		Set to true to replace the currency symbol with the international currency code.
			
	- precision(float $value, int $precision = 3, array $options =[])
		echo $this->Number->precision(456.91873645, 2); //456.92
		
	- toPercentage(mixed $value, int $precision = 2, array $options =[])
	- toReadableSize(string $size)
		echo $this->Number->toReadableSize(0); // 0 Byte
		echo $this->Number->toReadableSize(1024); // 1 KB
		echo $this->Number->toReadableSize(1321205.76); // 1.26 MB
		echo $this->Number->toReadableSize(5368709120); // 5 GB
		
	- format(mixed $value, array $options =[])
		+ $options
			* places 		Number of decimal places to use, ie. 2
			* precision 	Maximum number of decimal places to use, ie. 2
			* pattern 		An ICU number pattern to use for formatting the number ie. #,###.00
			* locale 		The locale name to use for formatting number, ie. “fr_FR”.
			* before 		Text to display before the rendered number.
			* after 		Text to display after the rendered number.
	
		echo $this->Number->format('123456.7890', [
			'places' => 2,
			'before' => '¥ ',
			'after' => ' !'
		]);
		// Output '¥ 123,456.79 !'
	
	- ordinal(mixed $value, array $options =[])
		+ 
	
	
	
	
	
	
	
	
	
	
	
	