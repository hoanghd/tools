12. Utility
	- Cake\Core\App
		* className($class, $type = '', $suffix = '')
			App::classname('Auth', 'Controller/Component', 'Component'); //Cake\Controller\Component\AuthComponent
			App::classname('DebugKit.Toolbar', 'Controller/Component', 'Component'); //DebugKit\Controller\Component\ToolbarComponent
			App::classname('App\Cache\ComboCache'); //App\Cache\ComboCache
		
		* shortName($class, $type, $suffix = '')
		* path($type, $plugin = null)
		* core($type)
	
	- Cake\Collection\Collection  #http://book.cakephp.org/3.0/en/core-libraries/collections.html
		* Cake\Collection\Iterator\FilterIterator		
			* each(callable $c) 
				(new Collection($items))->each(function($value, $key){});
				
		- Filter		
			* filter(callable $c = null);
				(new Collection($items))->filter(function($value, $key){ return true/false; });			
				
			* reject(callable $c) Ngược lại với filter
				(new Collection($items))->reject(function($value, $key){ return true/false; });
		
		- Change Value		
			* map(callable $c); Trả về một Collection value thay đổi trong callback return
				(new Collection($items))->map(function($value, $key){ return true/false; });			
				
				(new Collection(['one' => 1, 'two' => 2, 'three' => 3]))
					->map(function($value, $key){ return $value * 2; })
					->toArray()
				
					//['one' => 2, 'two' => 4, 'three' => 6];				
			
			* extract($matcher); Truy xuất phần tử ở từng row theo rule (sử dụng ., {*})
				(new Collection($items))->extract('comment.votes.{*}.value');
			
			* sortBy($callback, $dir = SORT_DESC, $type = SORT_NUMERIC);
				sortBy('age');
				sortBy(function($user){
					return $user->age;
				});
				
			* groupBy($callback);
				$students = [
					['name' => 'Mark', 'grade' => 9],
					['name' => 'Andrew', 'grade' => 10],
					['name' => 'Stacy', 'grade' => 10],
					['name' => 'Barbara', 'grade' => 9]
				];
				[
				  10 => [ ['name' => 'Andrew', 'grade' => 10],['name' => 'Stacy', 'grade' => 10] ],
				  9 => [ ['name' => 'Mark', 'grade' => 9], ['name' => 'Barbara', 'grade' => 9] ]
				]
			
			* indexBy($callback); Lấy value of item ra làm key
				[['age' => 3, 'name'=>'A'], ['age' => 2, 'name'=>'B'], ['age' => 5, 'name'=>'C']];
				[3=>['age' => 3, 'name'=>'A'], 2=>['age' => 2, 'name'=>'B'], 5=>['age' => 5, 'name'=>'C']];
		
			* countBy($callback);
				[['age' => 2, 'name'=>'A'], ['age' => 2, 'name'=>'B'], ['age' => 5, 'name'=>'C']];
				Count theo age: 2 người 2 tuổi và 1 người 5 tuổi
				[2=>2, 5=>1]	
			
			* sumOf($matcher = null)
				[1,2,3,4]	=> 10
				[['age' => 2, 'name'=>'A'], ['age' => 2, 'name'=>'B'], ['age' => 5, 'name'=>'C']]
				-> 9 | sumOf('age')
		
			* shuffle()
				['a' => 1, 'b' => 2, 'c' => 3]
				[2, 3, 1]
			
			* sample($size = 10) Create Random $size item
			
			* 
				
		- Single Value
			* reduce(callable $c, $zero = null); Chuyên đổi list thành một phần tử
				+ Tính total của đơn hàng
					$totalPrice = $collection->reduce(function ($accumulated, $orderLine) {
						return $accumulated + $orderLine->price;
					}, 0);
					
				+ List all tag của rows
					$allTags = $collection->reduce(function ($accumulated, $article) {
						return array_merge($accumulated, $article->tags);
					}, []);	
			
			* max($callback, $type = SORT_NUMERIC) Trả về row với item max
				max('user.salary')
				max(function($e){
					return $e->get('user')->get('salary');
				});
			
			* min($callback, $type = SORT_NUMERIC); Tương tự như min
			
			
		- Verify	
			* every(callable $c) //Kiểm tra all item thỏa điều kiện
				(new Collection($items))->every(function($value, $key){ return true/false; });
				
			* some(callable $c)	//Nếu có bất kỳ item thỏa điều kiện
				(new Collection($items))->every(function($value, $key){ return true/false; });
				
			* contains($value); //Kiểm tra $value có trong Collection không
			
			
			
    [3] => count
    [5] => rewind
    [6] => valid
    [7] => key
    [8] => current
    [9] => next
    [10] => getInnerIterator
    [27] => shuffle
    [28] => sample
    [29] => take
    [30] => skip
    [31] => match
    [32] => firstMatch
    [33] => first
    [34] => last
    [35] => append
    [36] => combine
    [37] => nest
    [38] => insert
    [39] => toArray
    [40] => toList
    [41] => jsonSerialize
    [42] => compile
    [43] => buffered
    [44] => listNested
    [45] => stopWhen
    [46] => unfold
    [47] => through
    [48] => zip
    [49] => zipWith
    [50] => chunk
    [51] => isEmpty
    [52] => unwrap
    [53] => transpose
    [54] => _unwrap