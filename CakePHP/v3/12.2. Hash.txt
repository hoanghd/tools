12. Hash	
	- Cake\Utility\Hash
	- http://book.cakephp.org/3.0/en/core-libraries/hash.html
	
	+ Expression: {n}, {s}
	+ Attribute : [id], [id=2], [id!=2], [id>2], [id>=2], [id<2], [id<=2], [text=/.../] 
	
	* get(array|ArrayAccess $data, $path, $default = null) //Trả về value từ array
	
	* insert(array $data, $path, $values = null)
	
	* remove(array $data, $path = null)
	
	* extract(array|ArrayAccess $data, $path)
		* - `1.User.name` Get the name of the user at index 1.
		* - `{n}.User.name` Get the name of every user in the set of users.
		* - `{n}.User[id]` Get the name of every user with an id key.
		* - `{n}.User[id>=2]` Get the name of every user with an id key greater than or equal to 2.
		* - `{n}.User[username=/^paul/]` Get User elements with username matching `^paul`.
		* - `{n}.User[id=1].name` Get the Users name with id matching `1`.
	 
	    $users = [
			['id' => 1, 'name' => 'mark'],
			['id' => 2, 'name' => 'jane'],
			['id' => 3, 'name' => 'sally'],
			['id' => 4, 'name' => 'jose'],
		];
		
		[1,2,3,4]; //extract($users, '{n}.id')
	
	* combine(array $data, $keyPath, $valuePath = null, $groupPath = null)
		Tạo ra [key=>val]
		
	* format(array $data, array $paths, $format)
		Tạo [value, ...]
		Value = $format với giá trị lấy từ $paths;
		
		$data = [
			[ 'Person' => [ 'first_name' => 'Nate', 'last_name' => 'Abele', 'city' => 'Boston', 'state' => 'MA', 'something' => '42' ]],
			[ 'Person' => [ 'first_name' => 'Larry', 'last_name' => 'Masters', 'city' => 'Boondock', 'state' => 'TN', 'something' => '{0}' ]],
			[ 'Person' => [ 'first_name' => 'Garrett', 'last_name' => 'Woodworth', 'city' => 'Venice Beach', 'state' => 'CA', 'something' => '{1}']]
		];
		
		Hash::format($data, ['{n}.Person.first_name', '{n}.Person.something'], '%2$d, %1$s');
		
		[ '42, Nate', '0, Larry', '0, Garrett']
		
	* map(array $data, $path, $function)
	
	* reduce(array $data, $path, $function)
	* apply(array $data, $path, $function)
	* sort(array $data, $path, $dir, $type = 'regular')
	* diff(array $data, array $compare)
	* mergeDiff(array $data, array $compare)
	* normalize(array $data, $assoc = true)
	* nest(array $data, array $options =[])
	
	* filter(array $data, $callback =[, 'Hash', 'filter'])
	* flatten(array $data, $separator = '.')
		$arr = [
			[
				'Post' => ['id' => '1', 'title' => 'First Post'],
				'Author' => ['id' => '1', 'user' => 'Kyle'],
			],
			[
				'Post' => ['id' => '2', 'title' => 'Second Post'],
				'Author' => ['id' => '3', 'user' => 'Crystal'],
			],
		];
		
		[
			[0.Post.id] => 1
			[0.Post.title] => First Post
			[0.Author.id] => 1
			[0.Author.user] => Kyle
			[1.Post.id] => 2
			[1.Post.title] => Second Post
			[1.Author.id] => 3
			[1.Author.user] => Crystal
		]
	
	* expand(array $data, $separator = '.') Ngược lại với flatten
	* merge(array $data, array $merge[, array $n])
	
	* dimensions(array $data): Xác định số cấp của mảng xử lý khi gặp array đâu tiên
	* maxDimensions(array $data)	
	
	* contains(array $data, array $needle)
	* check(array $data, string $path = null)
	* numeric(array $data) //Checks to see if all the values in the array are numeric
	
		
	
	
	
	
	
	
	