Link
	- http://book.cakephp.org/3.0/en/orm.html
	- Cake\ORM\Table
		* initialize(array $config) Sử dụng để khởi tạo các cấu hình
		* table($table = null): Chỉ định table name trong database, mặc định dựa vào tên class
		* alias($alias = null): Chỉ định alias mặc định dựa vào tên class
		* aliasField($field): Thêm alias vào field <alias>.<field>
		* hasField($field): Check field có tồn tại trong database không
		* primaryKey($key = null): Set primary key field
		* entityClass($name = null) 
			+ mặc định '\Cake\ORM\Entity'
			+ \Model\Entity\$name
		* addBehavior($name, array $options = [])
		* removeBehavior($name)
		* hasBehavior($name)
		* association($name)
		
		* addAssociations(array $params)
			+ belongsTo
			+ hasOne
			+ hasMany
			+ belongsToMany
		
		* belongsTo($associated, array $options = [])
			+ $options
				- className 	The class name of the target table object
				- targetTable 	An instance of a table object to be used as the target table
				- foreignKey 	The name of the field to use as foreign key, if false none will be used
				- conditions 	array with a list of conditions to filter the join with
				- joinType		The type of join to be used (e.g. INNER)
				- strategy	 	The loading strategy to use. 'join' and 'select' are supported.
				- finder 		The finder method to use when loading records from this association.
				   				Defaults to 'all'. When the strategy is 'join', only the fields, containments,
				   				and where conditions will be used from the finder.
		
		* hasOne($associated, array $options = [])
			+ $options
				- className			The class name of the target table object
				- targetTable		An instance of a table object to be used as the target table
				- foreignKey		The name of the field to use as foreign key, if false none  will be used
				
				- dependent			Set to true if you want CakePHP to cascade deletes to the
									associated table when an entity is removed on this table. The delete operation
									on the associated table will not cascade further. To get recursive cascades enable
									`cascadeCallbacks` as well. Set to false if you don't want CakePHP to remove
									associated data, or when you are using database constraints.
									
				- cascadeCallbacks	Set to true if you want CakePHP to fire callbacks on
									cascaded deletes. If false the ORM will use deleteAll() to remove data.
									When true records will be loaded and then deleted.
									
				- conditions		array with a list of conditions to filter the join with
				- joinType			The type of join to be used (e.g. LEFT)
				- strategy			The loading strategy to use. 'join' and 'select' are supported.
				- finder			The finder method to use when loading records from this association.
									Defaults to 'all'. When the strategy is 'join', only the fields, containments,
									and where conditions will be used from the finder.
									
		* hasMany($associated, array $options = [])
			+ $options
				- className			The class name of the target table object
				- targetTable		An instance of a table object to be used as the target table
				- foreignKey		The name of the field to use as foreign key, if false none will be used
				- dependent			Set to true if you want CakePHP to cascade deletes to the
									associated table when an entity is removed on this table. The delete operation
									on the associated table will not cascade further. To get recursive cascades enable
									`cascadeCallbacks` as well. Set to false if you don't want CakePHP to remove
									associated data, or when you are using database constraints.
				- cascadeCallbacks	Set to true if you want CakePHP to fire callbacks on
									cascaded deletes. If false the ORM will use deleteAll() to remove data.
									When true records will be loaded and then deleted.
				- conditions		array with a list of conditions to filter the join with
				- sort				The order in which results for this association should be returned
				- saveStrategy		Either 'append' or 'replace'. When 'append' the current records
									are appended to any records in the database. When 'replace' associated records
									not in the current set will be removed. If the foreign key is a null able column
									or if `dependent` is true records will be orphaned.
				- strategy			The strategy to be used for selecting results Either 'select'
									or 'subquery'. If subquery is selected the query used to return results
									in the source table will be used as conditions for getting rows in the
									target table.
				- finder			The finder method to use when loading records from this association.
									Defaults to 'all'.
		
		* belongsToMany($associated, array $options = [])
			+ $options
				- className: 		The class name of the target table object.
				- targetTable: 		An instance of a table object to be used as the target table.
				- foreignKey: 		The name of the field to use as foreign key.
				- targetForeignKey: The name of the field to use as the target foreign key.
				- joinTable: 		The name of the table representing the link between the two
				- through: 			If you choose to use an already instantiated link table, set this
									key to a configured Table instance containing associations to both the source
									and target tables in this association.
				- dependent: 		Set to false, if you do not want junction table records removed
									when an owning record is removed.
				- cascadeCallbacks: Set to true if you want CakePHP to fire callbacks on
									cascaded deletes. If false the ORM will use deleteAll() to remove data.
									When true join/junction table records will be loaded and then deleted.
				- conditions: 		array with a list of conditions to filter the join with.
				- sort: 			The order in which results for this association should be returned.
				- strategy: 		The strategy to be used for selecting results Either 'select'
									or 'subquery'. If subquery is selected the query used to return results
									in the source table will be used as conditions for getting rows in the
									target table.
				- saveStrategy: 	Either 'append' or 'replace'. Indicates the mode to be used
									for saving associated entities. The former will only create new links
									between both side of the relation and the latter will do a wipe and
									replace to create the links between the passed entities when saving.
				- strategy: 		The loading strategy to use. 'select' and 'subquery' are supported.
				- finder: 			The finder method to use when loading records from this association.
									Defaults to 'all'.
									
		* find($type = 'all', $options = [])
			+ $type 
				- all, 
				- list[keyField, valueField, groupField] : Trả về dạng hash (key=>value)
				- threaded[keyField, parentField, nestingKey] : Trả về dạng tree
			+ $options
				- fields
				- conditions
				- order
				- limit
				- offset
				- page
				- group
				- having
				- contain
				- join
		* get($primaryKey, $options = []) //Trả về 1 row by primary id
		* query()
		* updateAll($fields, $conditions)
		* deleteAll($conditions)
		* exists($conditions)
		* save(EntityInterface $entity, $options = [])
			$options
				* atomic: 	   		Whether to execute the save and callbacks inside a database
									transaction (default: true)
				* checkRules:  		Whether or not to check the rules on entity before saving, if the checking
									fails, it will abort the save operation. (default:true)
				* associated:  		If `true` it will save 1st level associated entities as they are found
								    in the passed `$entity` whenever the property defined for the association
								    is marked as dirty. If an array, it will be interpreted as the list of associations
								    to be saved. It is possible to provide different options for saving on associated
								    table objects using this key by making the custom options the array value.
								    If `false` no associated records will be saved. (default: `true`)
				* checkExisting: 	Whether or not to check if the entity already exists, assuming that the
									entity is marked as not new, and the primary key has been set.			
			
		* saveMany($entities, $options = [])
		* delete(EntityInterface $entity, $options = [])
			+ $options
				- atomic 		Defaults to true. When true the deletion happens within a transaction.
				- checkRules 	Defaults to true. Check deletion rules before deleting the record.
		
		* newEntity($data = null, array $options = [])
			+ $data: $this->request->data()
			+ $options: associated, fieldList, accessibleFields, validate
		* newEntities(array $data, array $options = [])
		* patchEntity(EntityInterface $entity, array $data, array $options = [])
		* patchEntities($entities, array $data, array $options = [])
		* validateUnique($value, array $options, array $context = null)
		* buildRules(RulesChecker $rules)
		* loadInto($entities, array $contain)
		* hasFinder($type)
		* callFinder($type, Query $query, array $options = [])	
		* marshaller()
		* findAll(Query $query, array $options) //find('all') overwrite
		* findList(Query $query, array $options) 
			+ find('list', [ 'keyField' => 'name', 'valueField' => 'age', 'groupField' => 'category_id'])
			+ Mặc định [ 'keyField' => $this->primaryKey(), 'valueField' => $this->displayField() ]
		* findThreaded(Query $query, array $options)
		* findOrCreate($search, callable $callback = null, $options = [])
		
	- Tổng kết
		+ Query
		+ Related
		+ Insert, Update, Delete
		